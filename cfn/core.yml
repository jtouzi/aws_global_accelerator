---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'This CloudFormation template creates and configures a Lambda function behind an Application Load Balancer with a simple healthcheck.'
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.135.0.0/16
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: GlobalAcceleratorVPC
  InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
        - Key: Name
          Value: GlobalAcceleratorVPC Internet Gateway
  AttachGateway:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: !Ref VPC
        InternetGatewayId: !Ref InternetGateway
  PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: 10.135.0.0/24
        AvailabilityZone: !Select
          - '0'
          - !GetAZs ''
        Tags:
          - Key: Name
            Value: Private Subnet 1
  PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: 10.135.1.0/24
        AvailabilityZone: !Select
          - '1'
          - !GetAZs ''
        Tags:
          - Key: Name
            Value: Private Subnet 2
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Route Table
  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - !Ref PrivateSubnet1
      - !Ref PrivateSubnet2
      Scheme: internal
      SecurityGroups: [!Ref ALBSecurityGroup]
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      -
        Type: forward
        TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: '80'
      Protocol: HTTP
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 35
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 5
      TargetType: lambda
      Targets:
      -
        Id: !GetAtt Function.Arn
    DependsOn: Permission
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP/S access on the Application Load Balancer
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - 'lambda.amazonaws.com'
          Action:
            - sts:AssumeRole
  Function:
    Type: AWS::Lambda::Function
    Properties:
      Description: This Lambda function simply return the AWS region and it name.
      Code:
        ZipFile: |
            '''
            # Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
            # Licensed under the Apache License, Version 2.0 (the "License"). A copy of the License is located at http://aws.amazon.com/apache2.0/
            #
            # Description: This Lambda function simply return the AWS region and it name.
            '''

            import logging
            import os

            logging.basicConfig()
            logger = logging.getLogger()
            logger.setLevel(logging.INFO)
            awsRegion = os.environ["AWS_REGION"]
            functionName = os.environ["AWS_LAMBDA_FUNCTION_NAME"]

            def lambda_handler(event, context):

                response = {
                "statusCode": 200,
                "statusDescription": "200 OK",
                "isBase64Encoded": False,
                "headers": {
                    "Content-Type": "application/json"
                },
                "body": "Processed in " + awsRegion.upper() + " by " + functionName + "\n"
                }
                return response

      Handler: index.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
      Timeout: 30
  Permission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt Function.Arn
      Principal: elasticloadbalancing.amazonaws.com
Outputs:
  URL:
    Description: URL of the ALB
    Value: !Join ['', ['http://', !GetAtt [ApplicationLoadBalancer, DNSName]]]
