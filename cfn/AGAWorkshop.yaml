---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'This CloudFormation template creates and configures a Lambda function behind an Application Load Balancer with a simple healthcheck.'
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.135.0.0/16
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: GlobalAcceleratorVPC
  InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
        - Key: Name
          Value: GlobalAcceleratorVPC Internet Gateway
  InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: !Ref VPC
        InternetGatewayId: !Ref InternetGateway
  PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: 10.135.0.0/24
        AvailabilityZone: !Select
          - '0'
          - !GetAZs ''
        Tags:
          - Key: Name
            Value: Public Subnet 1
  PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: 10.135.1.0/24
        AvailabilityZone: !Select
          - '1'
          - !GetAZs ''
        Tags:
          - Key: Name
            Value: Public Subnet 2
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public Route Table
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      Scheme: internet-facing
      SecurityGroups: [!Ref ALBSecurityGroup]
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      -
        Type: forward
        TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: '80'
      Protocol: HTTP
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 35
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 5
      TargetType: lambda
      Targets:
      -
        Id: !GetAtt Function.Arn
    DependsOn: Permission
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP/S access on the Application Load Balancer
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - 'lambda.amazonaws.com'
          Action:
            - sts:AssumeRole
  Function:
    Type: AWS::Lambda::Function
    Properties:
      Description: This Lambda function simply return the AWS region and it name.
      Code:
        ZipFile: |
            '''
            # Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
            # Licensed under the Apache License, Version 2.0 (the "License"). A copy of the License is located at http://aws.amazon.com/apache2.0/
            #
            # Description: This Lambda function returns:
                the AWS region and it name if the request Path is not /100KB,
                generates a file of around 100KB if the request path is /100KB
            '''

            import boto3
            import logging
            import os
            import random


            logging.basicConfig()
            logger = logging.getLogger()
            logger.setLevel(logging.INFO)
            awsRegion = os.environ["AWS_REGION"]
            functionName = os.environ["AWS_LAMBDA_FUNCTION_NAME"]

            def lambda_handler(event, context):

                response = {
                "statusCode": 200,
                "statusDescription": "200 OK",
                "isBase64Encoded": False,
                "headers": {
                    "Content-Type": "text/plain"
                    }
                }


                if event['path'] == '/100KB':

                    if os.path.isfile("/tmp/100KB"):
                        myFile = open("/tmp/100KB", "r")
                    else:
                        aws_aga = ("Easy manageability: The static IP addresses provided by AWS Global Accelerator are fixed and provide a single entry point to your applications.", "Fine-grained control: AWS Global Accelerator lets you set a traffic dial for your regional endpoint groups, to dial traffic up or down for a specific AWS Region when you conduct performance testing or application updates.", "Improved performance: AWS Global Accelerator ingresses traffic from the edge location that is closest to your end clients through anycast static IP addresses.", "High availability: AWS Global Accelerator has a fault-isolating design that increases the availability of your application. When you create an accelerator, you are allocated two IPv4 static IP addresses that are serviced by independent network zones.", "Instant regional failover: AWS Global Accelerator automatically checks the health of your applications and routes user traffic only to healthy application endpoints. If the health status changes or you make configuration updates, AWS Global Accelerator reacts instantaneously to route your users to the next available endpoint.")
                        all = [aws_aga]

                        with open('/tmp/100KB','w') as f:
                            mySize = 100 * 1024 * 1024 ## 100KB
                            for i in range(1880):
                                chars = ''.join([random.choice(i) for i in all])
                                f.write(chars + '\n')
                                if os.path.getsize("/tmp/100KB") > mySize:
                                    break
                        pass
                        myFile = open("/tmp/100KB", "r")

                    response['body'] = myFile.read()

                else:
                  response['body']= "Processed in " + awsRegion.upper() + " by " + functionName + "\n"

                return response

      Handler: index.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
      Timeout: 30
  Permission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt Function.Arn
      Principal: elasticloadbalancing.amazonaws.com
Outputs:
  URL:
    Description: URL of the ALB
    Value: !Join ['', ['http://', !GetAtt [ApplicationLoadBalancer, DNSName]]]
